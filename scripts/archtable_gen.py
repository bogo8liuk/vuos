#!/usr/bin/env python3
import sys
from os import path, chdir


def usage():
	print("{}: the input should be ".format(sys.argv[0]) +
			"vu_syscalls.conf")

if len(sys.argv) < 2 or not path.isfile(sys.argv[1]):
	usage()
	sys.exit(1)

# Parse vu_syscalls.conf
vu_syscalls = dict()
vu_sysargs = dict()
vvu_sysargs = dict()
with open(sys.argv[1]) as f:
	for line in f:
		line = line.strip()
		if not line.startswith('#'):
			um_syscall_list = line.split(':')
			if len(um_syscall_list) > 1:
				um_syscall = um_syscall_list[0].split(',')
				value = um_syscall[0].strip()
				value = value.split('/')[0].strip()
				if value.startswith('-'):
					value = value[1:].strip()
					for s in um_syscall:
						sys_arg = s.split('/')
						vsysname = sys_arg[0].strip()
						if vsysname.startswith('-'):
							vsysname = vsysname[1:].strip()
						if len(sys_arg) > 1:
							vvu_sysargs[vsysname] = sys_arg[1].strip()
				else:
					for s in um_syscall:
						vu_syscalls[s.split('/')[0].strip()] = value
					for s in um_syscall:
						sys_arg = s.split('/')
						if len(sys_arg) > 1:
							vu_sysargs[sys_arg[0].strip()] = sys_arg[1].strip()
				
def acceptable(string):
	if string.startswith('#') or \
		string.startswith('-') or \
		string.startswith('null') or \
		string.startswith('BUILTIN'):
		return False
	else:
		return True

def get_syscall_names(string):
	syscall_list = []
	s = string.rpartition(':')
	if ':' == s[1]:
		seq = s[0].split(', ')
		for syscall in seq:
			parts = syscall.rpartition('/')
			if parts[1] == '/':
				syscall_list.append(parts[0])
			else:
				syscall_list.append(parts[2])
	return syscall_list

# Parse and output
footer = "};\n"
print ('''#include <syscall_defs.h>
#include <arch_table.h>

/*This table has been autogenerated! */
''')

undef_code = ""
with open(sys.argv[1]) as f:
	for line in f:
		if acceptable(line):
			syscall_names = get_syscall_names(line)
			for syscall_name in syscall_names:
				syscall_symbol = '__NR_' + syscall_name
				undef_code +='''#ifdef POSTDEF{0}
#	undef POSTDEF{0}
#	undef {0}
#endif
'''.format(syscall_symbol)

print(undef_code)
print('#undef __VU_SYSCALL_NO__\n')

print('const uint16_t vu_arch_table[SYSCALL_NR_OVERESTIMATION] = {')
for syscall in sorted(vu_syscalls):
	print("\t#ifdef __NR_{}".format(syscall))
	print("\t\t[__NR_{}] = __VU_{},".format(syscall, vu_syscalls[syscall]))
	print("\t#endif")
print(footer);

print('const uint8_t vu_arch_args[SYSCALL_NR_OVERESTIMATION] = {')
for syscall in sorted(vu_sysargs):
	print("\t#ifdef __NR_{}".format(syscall))
	print("\t\t[__NR_{}] = 0{},".format(syscall, vu_sysargs[syscall]))
	print("\t#endif")
print(footer);

print('''const uint8_t vvu_arch_args[VVU_NR_SYSCALLS] = {
\t[0] = 0,''')
for syscall in sorted(vvu_sysargs):
	print("\t[-__VVU_{}] = 0{},".format(syscall, vvu_sysargs[syscall]))
print(footer);

